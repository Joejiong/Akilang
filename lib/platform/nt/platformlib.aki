# Microsoft Win32/NT library interfaces

extern SetConsoleOutputCP(codepage :u32) :bool
extern GetConsoleOutputCP() :u32
extern MultiByteToWideChar(
    CodePage: u32, dwFlags: u32, 
    lpMultiByteStr:ptr u8,
    cbMultiByte: i32,
    lpWideCharStr: ptr u8,
    cchWideChar: i32
)
extern GetProcessHeap():u_size
extern HeapAlloc(handle:u_size, flags:u32, bytes:u_size):ptr u_mem
extern HeapFree(handle:u_size, flags:u32, m:ptr u_mem): bool

# c stdlib interfaces

extern printf(str_fmt :ptr i8, *va) :i32

extern _snprintf(str_buf: ptr u_mem, str_size:u_size, str_fmt: ptr i8, *va): i32
extern strlen(str_to_check: ptr u_mem): u_size
extern rand():i32
extern memcpy_s(dest:ptr u_size, size:u_size, source: ptr u_mem, count: u_size)
extern _getwch():i32
extern gets_s(input:ptr u_mem, bytes:u_size)
extern atoi(string: ptr u_mem): i32
extern _get_errno(errno:ptr i32) :i32
extern memset(item:ptr u_mem, v:u8, size:u64)

# platformlib implementations

@inline
def c_strlen(str_to_check: ptr u_mem): u_size
    strlen(str_to_check)

@inline
def c_alloc(bytes:u_size):ptr u_mem
    HeapAlloc(GetProcessHeap(), 8u, bytes)

@inline
def c_alloc(bytes:i32):ptr u_mem
    c_alloc(cast(bytes, u_size))

@inline
@unsafe_req
def c_free(m:ptr u_mem):bool {
    var free_call = HeapFree(GetProcessHeap(), 0u, m)
    var result = (free_call !=0b)
    when result then memset(m, 0B, c_size(m))    
    result
}

# move to win32 library
@inline
def set_codepage(codepage :u32) :bool
    SetConsoleOutputCP(codepage)

# move to win32 library
@inline
def get_codepage() :u32
    GetConsoleOutputCP()

def int_to_c_str(my_int:i32): ptr u_mem {
    var size = c_size(my_int) * 4U + 1U
    var buffer = c_alloc(size)
    _snprintf(buffer, size, c_data('%i'),my_int)
    return buffer
}

@nomod
def c_str_to_int(my_str:str) :i32 {
    atoi(c_data(my_str))
}

# move to win32 library
@nomod
def utf_to_wide(in_str:str):ptr u8 {
  
    # TODO: untracked, b/c raw c_alloc calls
    # don't flag for tracking

    # TODO: a good test case for auto-promotion
    # of ints?

    var str_len = len(in_str)
    var out_size = str_len*2U

    var out_data=c_alloc(out_size)

    MultiByteToWideChar(
        65001u, 0, 
        c_data(in_str),
        cast(str_len,i32),
        out_data,
        cast(out_size,i32)
    )

    return out_data
}

# general cross-platform functions

def inkey():i32 {
    var key:i32
    key=_getwch()
    when (key==0 or key==224) then key=_getwch()
    return key
}

def input(bufsize:i32=1024):str{
    var buf=c_alloc(bufsize)
    var err:i32
    
    gets_s(
        buf, cast(bufsize,u64)
    )
    
    # we don't do anything with this yet,
    # but in time we will
    _get_errno(c_ref(err))

    var s_len = strlen(buf)-1U
    
    var cr=c_ptr_math(
        buf, s_len
    )

    # NT compatibility - strip CRs
    if (c_deref(cr) == 13B) then
        unsafe {
        c_ptr_mod(cr, 0B)
    }

    return str(buf)   
}
