pragma {
    size_level = 2
}

class Player {
    x:i32,
    y:i32
}

class Robot{
    x:i32,
    y:i32,
    killed:bool
}

const {
    WIDTH=40,
    HEIGHT=20,
    FIELD_SIZE = (WIDTH+1)*HEIGHT
    FENCE = 177B
    WALL = 219B
    ROBOTS = 10
    FROTZ= "FROTZZZZZ"
}

uni {
    field:byte[WIDTH,HEIGHT],
    display:byte[FIELD_SIZE],
    player:Player,
    robots:Robot[ROBOTS]
}

def show(dead_robots){
    var z=0

    loop(y=0, y<HEIGHT){
        loop(x=0, x<WIDTH){
            display[z]=(
                if field[x,y]==0B
                    then 32B
                    else field[x,y]
            )
            z+=1
        }
        display[z]=10B
        z+=1
    }

    display[z]=0B

    loop (x=0, x<ROBOTS){
        when not robots[x].killed then
        display[(robots[x].y*(WIDTH+1))+robots[x].x]=
            cast(x+48,i8)
    }

    display[(player.y*(WIDTH+1))+player.x]=232B

    unsafe print ("\nDead robots: {dead_robots}\n{display}")
}

def location(v) {
    rnd(v-4)+2
}

def setup(){

    var nx=0, ny=0

    loop(y=0, y<HEIGHT)
        loop(x=0, x<WIDTH)
            field[x,y]=0B

    loop (x=0, x<HEIGHT){
        field[0,x]=WALL
        field[WIDTH-1,x]=WALL
    }
    loop (x=0, x<WIDTH){
        field[x,0]=WALL
        field[x,HEIGHT-1]=WALL
    }

    # Place human

    player.x=20
    player.y=10

    #Place electrodes

    loop (x=0, x<40){
        loop {
            nx = location(WIDTH)
            ny = location(HEIGHT)
            when nx==20 and ny==10 then continue
            when field[nx,ny]==0B then break
        }
        field[nx,ny]=FENCE
    }

    # Place robots    
    loop (x=0, x<ROBOTS) {
        var robot = robots[x]
        loop {
            nx = location(WIDTH)
            ny = location(HEIGHT)
            when nx==20 and ny==10 then continue
            when field[nx,ny]==0B then break
        }
        robot.x=nx
        robot.y=ny
        robot.killed=0b
    }    

    0
}

def main(){
    print ("Robot Attack\n")
    with var x:i32 {
        loop {
            print ("Do you need instructions? [y/n/q] > ", end='')
            x=inkey()
            match x {
                121: {x=1 break}
                110: {x=0 break}
                113: {return 0}
                default: continue
            }
        }
        when x then {
            print ('
You are in a maze with ten killer robots (0-9) that are hunting
you. The maze is also filled with electrified fences that will
short out the robots if they run into them, but will also kill
YOU if you run into them.

The robots will always head straight for you. To win the game,
lure the robots into running into the electric fences without
electrocuting yourself as well.

Use the number pad to move in eight directions, including diagonals.
Press Space to pass a turn without making a move.
')
        }
    }
    
    loop {
        setup()
        
        var xvec, yvec,
            dead=0,
            dead_robots=0

        loop {
            show(dead_robots)
            var key=inkey()
            xvec=0
            yvec=0
            match key {
                71: {yvec=-1 xvec=-1}
                73: {yvec=-1 xvec=1}
                79: {yvec=1 xvec=-1}
                81: {yvec=1 xvec=1}
                72: yvec=-1
                80: yvec=1
                75: xvec=-1
                77: xvec=1
                113: {
                    print ("Quitting (wimp!)")
                    break
                }
                32: pass
                default: continue
            }
            
            var loc = field[player.x+xvec,player.y+yvec]
            match loc {
                FENCE: {
                    print ("{FROTZ}\nYou just stepped into an electrified fence.")
                    break
                }
                WALL: {
                    print ("Illegal move")
                    continue
                }
            }

            player.x+=xvec
            player.y+=yvec

            with var x:i32 {
                loop (x=0, x<ROBOTS) 
                {
                    xvec = 0
                    yvec = 0

                    var robot = robots[x]

                    when robot.killed then continue

                    when robot.x>player.x then
                        xvec=-1
                    else when robot.x<player.x then
                        xvec=1

                    when robot.y>player.y then
                        yvec=-1
                    else when robot.y<player.y then
                        yvec=1

                    when field[robot.x+xvec,robot.y+yvec] == FENCE then {
                        robot.killed=1b
                        dead_robots+=1
                        print ("Robot {x} killed!\n")
                        continue
                    }

                    # robots will not collide with each other

                    when display[
                        ((robots[x].y+yvec)*(WIDTH+1))
                        +
                        (robots[x].x+xvec)
                        ] !=0B then {
                            robot.x+=xvec
                            robot.y+=yvec
                        }

                    when robot.x==player.x and robot.y==player.y then {
                        print ("{FROTZ}\nYou were killed by robot {x}.")
                        dead=1
                        break
                    }

                }

                when dead_robots == ROBOTS then {
                    print ("You win!")
                    break
                }
                
                when dead then break
           
            }

        }

        with var x:i32 {
            loop {
                print ("\nPlay again? [y/n] > ", end='')
                x=inkey()
                match x {
                    121: {x=1 break}
                    110: {x=0 break}
                    default: continue
                    }
            }
            when x==0 then
            {
                print ("\nGoodbye!")
                break
            }
        }
    }
    0
}